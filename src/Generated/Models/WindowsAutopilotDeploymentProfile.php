<?php

namespace Microsoft\Graph\Beta\Generated\Models;

use DateTime;
use Microsoft\Kiota\Abstractions\Serialization\Parsable;
use Microsoft\Kiota\Abstractions\Serialization\ParseNode;
use Microsoft\Kiota\Abstractions\Serialization\SerializationWriter;
use Microsoft\Kiota\Abstractions\Types\TypeUtils;

/**
 * Windows Autopilot Deployment Profile
*/
class WindowsAutopilotDeploymentProfile extends Entity implements Parsable 
{
    /**
     * Instantiates a new windowsAutopilotDeploymentProfile and sets the default values.
    */
    public function __construct() {
        parent::__construct();
    }

    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param ParseNode $parseNode The parse node to use to read the discriminator value and create the object
     * @return WindowsAutopilotDeploymentProfile
    */
    public static function createFromDiscriminatorValue(ParseNode $parseNode): WindowsAutopilotDeploymentProfile {
        $mappingValueNode = $parseNode->getChildNode("@odata.type");
        if ($mappingValueNode !== null) {
            $mappingValue = $mappingValueNode->getStringValue();
            switch ($mappingValue) {
                case '#microsoft.graph.activeDirectoryWindowsAutopilotDeploymentProfile': return new ActiveDirectoryWindowsAutopilotDeploymentProfile();
                case '#microsoft.graph.azureADWindowsAutopilotDeploymentProfile': return new AzureADWindowsAutopilotDeploymentProfile();
            }
        }
        return new WindowsAutopilotDeploymentProfile();
    }

    /**
     * Gets the assignedDevices property value. The list of assigned devices for the profile.
     * @return array<WindowsAutopilotDeviceIdentity>|null
    */
    public function getAssignedDevices(): ?array {
        $val = $this->getBackingStore()->get('assignedDevices');
        if (is_array($val) || is_null($val)) {
            TypeUtils::validateCollectionValues($val, WindowsAutopilotDeviceIdentity::class);
            /** @var array<WindowsAutopilotDeviceIdentity>|null $val */
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'assignedDevices'");
    }

    /**
     * Gets the assignments property value. The list of group assignments for the profile.
     * @return array<WindowsAutopilotDeploymentProfileAssignment>|null
    */
    public function getAssignments(): ?array {
        $val = $this->getBackingStore()->get('assignments');
        if (is_array($val) || is_null($val)) {
            TypeUtils::validateCollectionValues($val, WindowsAutopilotDeploymentProfileAssignment::class);
            /** @var array<WindowsAutopilotDeploymentProfileAssignment>|null $val */
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'assignments'");
    }

    /**
     * Gets the createdDateTime property value. Profile creation time
     * @return DateTime|null
    */
    public function getCreatedDateTime(): ?DateTime {
        $val = $this->getBackingStore()->get('createdDateTime');
        if (is_null($val) || $val instanceof DateTime) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'createdDateTime'");
    }

    /**
     * Gets the description property value. Description of the profile
     * @return string|null
    */
    public function getDescription(): ?string {
        $val = $this->getBackingStore()->get('description');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'description'");
    }

    /**
     * Gets the deviceNameTemplate property value. The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.
     * @return string|null
    */
    public function getDeviceNameTemplate(): ?string {
        $val = $this->getBackingStore()->get('deviceNameTemplate');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'deviceNameTemplate'");
    }

    /**
     * Gets the deviceType property value. The deviceType property
     * @return WindowsAutopilotDeviceType|null
    */
    public function getDeviceType(): ?WindowsAutopilotDeviceType {
        $val = $this->getBackingStore()->get('deviceType');
        if (is_null($val) || $val instanceof WindowsAutopilotDeviceType) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'deviceType'");
    }

    /**
     * Gets the displayName property value. Name of the profile
     * @return string|null
    */
    public function getDisplayName(): ?string {
        $val = $this->getBackingStore()->get('displayName');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'displayName'");
    }

    /**
     * Gets the enableWhiteGlove property value. Enable Autopilot White Glove for the profile.
     * @return bool|null
    */
    public function getEnableWhiteGlove(): ?bool {
        $val = $this->getBackingStore()->get('enableWhiteGlove');
        if (is_null($val) || is_bool($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'enableWhiteGlove'");
    }

    /**
     * Gets the enrollmentStatusScreenSettings property value. Enrollment status screen setting
     * @return WindowsEnrollmentStatusScreenSettings|null
    */
    public function getEnrollmentStatusScreenSettings(): ?WindowsEnrollmentStatusScreenSettings {
        $val = $this->getBackingStore()->get('enrollmentStatusScreenSettings');
        if (is_null($val) || $val instanceof WindowsEnrollmentStatusScreenSettings) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'enrollmentStatusScreenSettings'");
    }

    /**
     * Gets the extractHardwareHash property value. HardwareHash Extraction for the profile
     * @return bool|null
    */
    public function getExtractHardwareHash(): ?bool {
        $val = $this->getBackingStore()->get('extractHardwareHash');
        if (is_null($val) || is_bool($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'extractHardwareHash'");
    }

    /**
     * The deserialization information for the current model
     * @return array<string, callable(ParseNode): void>
    */
    public function getFieldDeserializers(): array {
        $o = $this;
        return array_merge(parent::getFieldDeserializers(), [
            'assignedDevices' => fn(ParseNode $n) => $o->setAssignedDevices($n->getCollectionOfObjectValues([WindowsAutopilotDeviceIdentity::class, 'createFromDiscriminatorValue'])),
            'assignments' => fn(ParseNode $n) => $o->setAssignments($n->getCollectionOfObjectValues([WindowsAutopilotDeploymentProfileAssignment::class, 'createFromDiscriminatorValue'])),
            'createdDateTime' => fn(ParseNode $n) => $o->setCreatedDateTime($n->getDateTimeValue()),
            'description' => fn(ParseNode $n) => $o->setDescription($n->getStringValue()),
            'deviceNameTemplate' => fn(ParseNode $n) => $o->setDeviceNameTemplate($n->getStringValue()),
            'deviceType' => fn(ParseNode $n) => $o->setDeviceType($n->getEnumValue(WindowsAutopilotDeviceType::class)),
            'displayName' => fn(ParseNode $n) => $o->setDisplayName($n->getStringValue()),
            'enableWhiteGlove' => fn(ParseNode $n) => $o->setEnableWhiteGlove($n->getBooleanValue()),
            'enrollmentStatusScreenSettings' => fn(ParseNode $n) => $o->setEnrollmentStatusScreenSettings($n->getObjectValue([WindowsEnrollmentStatusScreenSettings::class, 'createFromDiscriminatorValue'])),
            'extractHardwareHash' => fn(ParseNode $n) => $o->setExtractHardwareHash($n->getBooleanValue()),
            'language' => fn(ParseNode $n) => $o->setLanguage($n->getStringValue()),
            'lastModifiedDateTime' => fn(ParseNode $n) => $o->setLastModifiedDateTime($n->getDateTimeValue()),
            'managementServiceAppId' => fn(ParseNode $n) => $o->setManagementServiceAppId($n->getStringValue()),
            '@odata.type' => fn(ParseNode $n) => $o->setOdataType($n->getStringValue()),
            'outOfBoxExperienceSettings' => fn(ParseNode $n) => $o->setOutOfBoxExperienceSettings($n->getObjectValue([OutOfBoxExperienceSettings::class, 'createFromDiscriminatorValue'])),
            'roleScopeTagIds' => function (ParseNode $n) {
                $val = $n->getCollectionOfPrimitiveValues();
                if (is_array($val)) {
                    TypeUtils::validateCollectionValues($val, 'string');
                }
                /** @var array<string>|null $val */
                $this->setRoleScopeTagIds($val);
            },
        ]);
    }

    /**
     * Gets the language property value. Language configured on the device
     * @return string|null
    */
    public function getLanguage(): ?string {
        $val = $this->getBackingStore()->get('language');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'language'");
    }

    /**
     * Gets the lastModifiedDateTime property value. Profile last modified time
     * @return DateTime|null
    */
    public function getLastModifiedDateTime(): ?DateTime {
        $val = $this->getBackingStore()->get('lastModifiedDateTime');
        if (is_null($val) || $val instanceof DateTime) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'lastModifiedDateTime'");
    }

    /**
     * Gets the managementServiceAppId property value. AzureAD management app ID used during client device-based enrollment discovery
     * @return string|null
    */
    public function getManagementServiceAppId(): ?string {
        $val = $this->getBackingStore()->get('managementServiceAppId');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'managementServiceAppId'");
    }

    /**
     * Gets the @odata.type property value. The OdataType property
     * @return string|null
    */
    public function getOdataType(): ?string {
        $val = $this->getBackingStore()->get('odataType');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'odataType'");
    }

    /**
     * Gets the outOfBoxExperienceSettings property value. Out of box experience setting
     * @return OutOfBoxExperienceSettings|null
    */
    public function getOutOfBoxExperienceSettings(): ?OutOfBoxExperienceSettings {
        $val = $this->getBackingStore()->get('outOfBoxExperienceSettings');
        if (is_null($val) || $val instanceof OutOfBoxExperienceSettings) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'outOfBoxExperienceSettings'");
    }

    /**
     * Gets the roleScopeTagIds property value. Scope tags for the profile.
     * @return array<string>|null
    */
    public function getRoleScopeTagIds(): ?array {
        $val = $this->getBackingStore()->get('roleScopeTagIds');
        if (is_array($val) || is_null($val)) {
            TypeUtils::validateCollectionValues($val, 'string');
            /** @var array<string>|null $val */
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'roleScopeTagIds'");
    }

    /**
     * Serializes information the current object
     * @param SerializationWriter $writer Serialization writer to use to serialize this model
    */
    public function serialize(SerializationWriter $writer): void {
        parent::serialize($writer);
        $writer->writeCollectionOfObjectValues('assignedDevices', $this->getAssignedDevices());
        $writer->writeCollectionOfObjectValues('assignments', $this->getAssignments());
        $writer->writeDateTimeValue('createdDateTime', $this->getCreatedDateTime());
        $writer->writeStringValue('description', $this->getDescription());
        $writer->writeStringValue('deviceNameTemplate', $this->getDeviceNameTemplate());
        $writer->writeEnumValue('deviceType', $this->getDeviceType());
        $writer->writeStringValue('displayName', $this->getDisplayName());
        $writer->writeBooleanValue('enableWhiteGlove', $this->getEnableWhiteGlove());
        $writer->writeObjectValue('enrollmentStatusScreenSettings', $this->getEnrollmentStatusScreenSettings());
        $writer->writeBooleanValue('extractHardwareHash', $this->getExtractHardwareHash());
        $writer->writeStringValue('language', $this->getLanguage());
        $writer->writeDateTimeValue('lastModifiedDateTime', $this->getLastModifiedDateTime());
        $writer->writeStringValue('managementServiceAppId', $this->getManagementServiceAppId());
        $writer->writeStringValue('@odata.type', $this->getOdataType());
        $writer->writeObjectValue('outOfBoxExperienceSettings', $this->getOutOfBoxExperienceSettings());
        $writer->writeCollectionOfPrimitiveValues('roleScopeTagIds', $this->getRoleScopeTagIds());
    }

    /**
     * Sets the assignedDevices property value. The list of assigned devices for the profile.
     * @param array<WindowsAutopilotDeviceIdentity>|null $value Value to set for the assignedDevices property.
    */
    public function setAssignedDevices(?array $value): void {
        $this->getBackingStore()->set('assignedDevices', $value);
    }

    /**
     * Sets the assignments property value. The list of group assignments for the profile.
     * @param array<WindowsAutopilotDeploymentProfileAssignment>|null $value Value to set for the assignments property.
    */
    public function setAssignments(?array $value): void {
        $this->getBackingStore()->set('assignments', $value);
    }

    /**
     * Sets the createdDateTime property value. Profile creation time
     * @param DateTime|null $value Value to set for the createdDateTime property.
    */
    public function setCreatedDateTime(?DateTime $value): void {
        $this->getBackingStore()->set('createdDateTime', $value);
    }

    /**
     * Sets the description property value. Description of the profile
     * @param string|null $value Value to set for the description property.
    */
    public function setDescription(?string $value): void {
        $this->getBackingStore()->set('description', $value);
    }

    /**
     * Sets the deviceNameTemplate property value. The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.
     * @param string|null $value Value to set for the deviceNameTemplate property.
    */
    public function setDeviceNameTemplate(?string $value): void {
        $this->getBackingStore()->set('deviceNameTemplate', $value);
    }

    /**
     * Sets the deviceType property value. The deviceType property
     * @param WindowsAutopilotDeviceType|null $value Value to set for the deviceType property.
    */
    public function setDeviceType(?WindowsAutopilotDeviceType $value): void {
        $this->getBackingStore()->set('deviceType', $value);
    }

    /**
     * Sets the displayName property value. Name of the profile
     * @param string|null $value Value to set for the displayName property.
    */
    public function setDisplayName(?string $value): void {
        $this->getBackingStore()->set('displayName', $value);
    }

    /**
     * Sets the enableWhiteGlove property value. Enable Autopilot White Glove for the profile.
     * @param bool|null $value Value to set for the enableWhiteGlove property.
    */
    public function setEnableWhiteGlove(?bool $value): void {
        $this->getBackingStore()->set('enableWhiteGlove', $value);
    }

    /**
     * Sets the enrollmentStatusScreenSettings property value. Enrollment status screen setting
     * @param WindowsEnrollmentStatusScreenSettings|null $value Value to set for the enrollmentStatusScreenSettings property.
    */
    public function setEnrollmentStatusScreenSettings(?WindowsEnrollmentStatusScreenSettings $value): void {
        $this->getBackingStore()->set('enrollmentStatusScreenSettings', $value);
    }

    /**
     * Sets the extractHardwareHash property value. HardwareHash Extraction for the profile
     * @param bool|null $value Value to set for the extractHardwareHash property.
    */
    public function setExtractHardwareHash(?bool $value): void {
        $this->getBackingStore()->set('extractHardwareHash', $value);
    }

    /**
     * Sets the language property value. Language configured on the device
     * @param string|null $value Value to set for the language property.
    */
    public function setLanguage(?string $value): void {
        $this->getBackingStore()->set('language', $value);
    }

    /**
     * Sets the lastModifiedDateTime property value. Profile last modified time
     * @param DateTime|null $value Value to set for the lastModifiedDateTime property.
    */
    public function setLastModifiedDateTime(?DateTime $value): void {
        $this->getBackingStore()->set('lastModifiedDateTime', $value);
    }

    /**
     * Sets the managementServiceAppId property value. AzureAD management app ID used during client device-based enrollment discovery
     * @param string|null $value Value to set for the managementServiceAppId property.
    */
    public function setManagementServiceAppId(?string $value): void {
        $this->getBackingStore()->set('managementServiceAppId', $value);
    }

    /**
     * Sets the @odata.type property value. The OdataType property
     * @param string|null $value Value to set for the OdataType property.
    */
    public function setOdataType(?string $value): void {
        $this->getBackingStore()->set('odataType', $value);
    }

    /**
     * Sets the outOfBoxExperienceSettings property value. Out of box experience setting
     * @param OutOfBoxExperienceSettings|null $value Value to set for the outOfBoxExperienceSettings property.
    */
    public function setOutOfBoxExperienceSettings(?OutOfBoxExperienceSettings $value): void {
        $this->getBackingStore()->set('outOfBoxExperienceSettings', $value);
    }

    /**
     * Sets the roleScopeTagIds property value. Scope tags for the profile.
     * @param array<string>|null $value Value to set for the roleScopeTagIds property.
    */
    public function setRoleScopeTagIds(?array $value): void {
        $this->getBackingStore()->set('roleScopeTagIds', $value);
    }

}
