<?php

namespace Microsoft\Graph\Beta\Generated\Models;

use DateTime;
use Microsoft\Kiota\Abstractions\Serialization\Parsable;
use Microsoft\Kiota\Abstractions\Serialization\ParseNode;
use Microsoft\Kiota\Abstractions\Serialization\SerializationWriter;

class WindowsDeviceMalwareState extends Entity implements Parsable 
{
    /**
     * @var string|null $additionalInformationUrl Information URL to learn more about the malware
    */
    private ?string $additionalInformationUrl = null;
    
    /**
     * @var WindowsMalwareCategory|null $category Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
    */
    private ?WindowsMalwareCategory $category = null;
    
    /**
     * @var int|null $detectionCount Number of times the malware is detected
    */
    private ?int $detectionCount = null;
    
    /**
     * @var string|null $displayName Malware name
    */
    private ?string $displayName = null;
    
    /**
     * @var WindowsMalwareExecutionState|null $executionState Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
    */
    private ?WindowsMalwareExecutionState $executionState = null;
    
    /**
     * @var DateTime|null $initialDetectionDateTime Initial detection datetime of the malware
    */
    private ?DateTime $initialDetectionDateTime = null;
    
    /**
     * @var DateTime|null $lastStateChangeDateTime The last time this particular threat was changed
    */
    private ?DateTime $lastStateChangeDateTime = null;
    
    /**
     * @var WindowsMalwareSeverity|null $severity Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
    */
    private ?WindowsMalwareSeverity $severity = null;
    
    /**
     * @var WindowsMalwareState|null $state Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
    */
    private ?WindowsMalwareState $state = null;
    
    /**
     * @var WindowsMalwareThreatState|null $threatState Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
    */
    private ?WindowsMalwareThreatState $threatState = null;
    
    /**
     * Instantiates a new windowsDeviceMalwareState and sets the default values.
    */
    public function __construct() {
        parent::__construct();
        $this->setOdataType('#microsoft.graph.windowsDeviceMalwareState');
    }

    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param ParseNode $parseNode The parse node to use to read the discriminator value and create the object
     * @return WindowsDeviceMalwareState
    */
    public static function createFromDiscriminatorValue(ParseNode $parseNode): WindowsDeviceMalwareState {
        return new WindowsDeviceMalwareState();
    }

    /**
     * Gets the additionalInformationUrl property value. Information URL to learn more about the malware
     * @return string|null
    */
    public function getAdditionalInformationUrl(): ?string {
        return $this->additionalInformationUrl;
    }

    /**
     * Gets the category property value. Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
     * @return WindowsMalwareCategory|null
    */
    public function getCategory(): ?WindowsMalwareCategory {
        return $this->category;
    }

    /**
     * Gets the detectionCount property value. Number of times the malware is detected
     * @return int|null
    */
    public function getDetectionCount(): ?int {
        return $this->detectionCount;
    }

    /**
     * Gets the displayName property value. Malware name
     * @return string|null
    */
    public function getDisplayName(): ?string {
        return $this->displayName;
    }

    /**
     * Gets the executionState property value. Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
     * @return WindowsMalwareExecutionState|null
    */
    public function getExecutionState(): ?WindowsMalwareExecutionState {
        return $this->executionState;
    }

    /**
     * The deserialization information for the current model
     * @return array<string, callable>
    */
    public function getFieldDeserializers(): array {
        $o = $this;
        return array_merge(parent::getFieldDeserializers(), [
            'additionalInformationUrl' => function (ParseNode $n) use ($o) { $o->setAdditionalInformationUrl($n->getStringValue()); },
            'category' => function (ParseNode $n) use ($o) { $o->setCategory($n->getEnumValue(WindowsMalwareCategory::class)); },
            'detectionCount' => function (ParseNode $n) use ($o) { $o->setDetectionCount($n->getIntegerValue()); },
            'displayName' => function (ParseNode $n) use ($o) { $o->setDisplayName($n->getStringValue()); },
            'executionState' => function (ParseNode $n) use ($o) { $o->setExecutionState($n->getEnumValue(WindowsMalwareExecutionState::class)); },
            'initialDetectionDateTime' => function (ParseNode $n) use ($o) { $o->setInitialDetectionDateTime($n->getDateTimeValue()); },
            'lastStateChangeDateTime' => function (ParseNode $n) use ($o) { $o->setLastStateChangeDateTime($n->getDateTimeValue()); },
            'severity' => function (ParseNode $n) use ($o) { $o->setSeverity($n->getEnumValue(WindowsMalwareSeverity::class)); },
            'state' => function (ParseNode $n) use ($o) { $o->setState($n->getEnumValue(WindowsMalwareState::class)); },
            'threatState' => function (ParseNode $n) use ($o) { $o->setThreatState($n->getEnumValue(WindowsMalwareThreatState::class)); },
        ]);
    }

    /**
     * Gets the initialDetectionDateTime property value. Initial detection datetime of the malware
     * @return DateTime|null
    */
    public function getInitialDetectionDateTime(): ?DateTime {
        return $this->initialDetectionDateTime;
    }

    /**
     * Gets the lastStateChangeDateTime property value. The last time this particular threat was changed
     * @return DateTime|null
    */
    public function getLastStateChangeDateTime(): ?DateTime {
        return $this->lastStateChangeDateTime;
    }

    /**
     * Gets the severity property value. Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
     * @return WindowsMalwareSeverity|null
    */
    public function getSeverity(): ?WindowsMalwareSeverity {
        return $this->severity;
    }

    /**
     * Gets the state property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
     * @return WindowsMalwareState|null
    */
    public function getState(): ?WindowsMalwareState {
        return $this->state;
    }

    /**
     * Gets the threatState property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
     * @return WindowsMalwareThreatState|null
    */
    public function getThreatState(): ?WindowsMalwareThreatState {
        return $this->threatState;
    }

    /**
     * Serializes information the current object
     * @param SerializationWriter $writer Serialization writer to use to serialize this model
    */
    public function serialize(SerializationWriter $writer): void {
        parent::serialize($writer);
        $writer->writeStringValue('additionalInformationUrl', $this->additionalInformationUrl);
        $writer->writeEnumValue('category', $this->category);
        $writer->writeIntegerValue('detectionCount', $this->detectionCount);
        $writer->writeStringValue('displayName', $this->displayName);
        $writer->writeEnumValue('executionState', $this->executionState);
        $writer->writeDateTimeValue('initialDetectionDateTime', $this->initialDetectionDateTime);
        $writer->writeDateTimeValue('lastStateChangeDateTime', $this->lastStateChangeDateTime);
        $writer->writeEnumValue('severity', $this->severity);
        $writer->writeEnumValue('state', $this->state);
        $writer->writeEnumValue('threatState', $this->threatState);
    }

    /**
     * Sets the additionalInformationUrl property value. Information URL to learn more about the malware
     *  @param string|null $value Value to set for the additionalInformationUrl property.
    */
    public function setAdditionalInformationUrl(?string $value ): void {
        $this->additionalInformationUrl = $value;
    }

    /**
     * Sets the category property value. Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
     *  @param WindowsMalwareCategory|null $value Value to set for the category property.
    */
    public function setCategory(?WindowsMalwareCategory $value ): void {
        $this->category = $value;
    }

    /**
     * Sets the detectionCount property value. Number of times the malware is detected
     *  @param int|null $value Value to set for the detectionCount property.
    */
    public function setDetectionCount(?int $value ): void {
        $this->detectionCount = $value;
    }

    /**
     * Sets the displayName property value. Malware name
     *  @param string|null $value Value to set for the displayName property.
    */
    public function setDisplayName(?string $value ): void {
        $this->displayName = $value;
    }

    /**
     * Sets the executionState property value. Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
     *  @param WindowsMalwareExecutionState|null $value Value to set for the executionState property.
    */
    public function setExecutionState(?WindowsMalwareExecutionState $value ): void {
        $this->executionState = $value;
    }

    /**
     * Sets the initialDetectionDateTime property value. Initial detection datetime of the malware
     *  @param DateTime|null $value Value to set for the initialDetectionDateTime property.
    */
    public function setInitialDetectionDateTime(?DateTime $value ): void {
        $this->initialDetectionDateTime = $value;
    }

    /**
     * Sets the lastStateChangeDateTime property value. The last time this particular threat was changed
     *  @param DateTime|null $value Value to set for the lastStateChangeDateTime property.
    */
    public function setLastStateChangeDateTime(?DateTime $value ): void {
        $this->lastStateChangeDateTime = $value;
    }

    /**
     * Sets the severity property value. Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
     *  @param WindowsMalwareSeverity|null $value Value to set for the severity property.
    */
    public function setSeverity(?WindowsMalwareSeverity $value ): void {
        $this->severity = $value;
    }

    /**
     * Sets the state property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
     *  @param WindowsMalwareState|null $value Value to set for the state property.
    */
    public function setState(?WindowsMalwareState $value ): void {
        $this->state = $value;
    }

    /**
     * Sets the threatState property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
     *  @param WindowsMalwareThreatState|null $value Value to set for the threatState property.
    */
    public function setThreatState(?WindowsMalwareThreatState $value ): void {
        $this->threatState = $value;
    }

}
