<?php

namespace Microsoft\\Graph\\Beta\\Generated\Models;

use DateTime;
use Microsoft\Kiota\Abstractions\Serialization\AdditionalDataHolder;
use Microsoft\Kiota\Abstractions\Serialization\Parsable;
use Microsoft\Kiota\Abstractions\Serialization\ParseNode;
use Microsoft\Kiota\Abstractions\Serialization\SerializationWriter;
use Microsoft\Kiota\Abstractions\Store\BackedModel;
use Microsoft\Kiota\Abstractions\Store\BackingStore;
use Microsoft\Kiota\Abstractions\Store\BackingStoreFactorySingleton;

/**
 * The local admin account password and its last rotation timestamp of the macOS managed device
*/
class MacOSManagedDeviceLocalAdminAccountDetail implements AdditionalDataHolder, BackedModel, Parsable 
{
    /**
     * @var BackingStore $backingStore Stores model information.
    */
    private BackingStore $backingStore;
    
    /**
     * Instantiates a new MacOSManagedDeviceLocalAdminAccountDetail and sets the default values.
    */
    public function __construct() {
        $this->backingStore = BackingStoreFactorySingleton::getInstance()->createBackingStore();
        $this->setAdditionalData([]);
    }

    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param ParseNode $parseNode The parse node to use to read the discriminator value and create the object
     * @return MacOSManagedDeviceLocalAdminAccountDetail
    */
    public static function createFromDiscriminatorValue(ParseNode $parseNode): MacOSManagedDeviceLocalAdminAccountDetail {
        return new MacOSManagedDeviceLocalAdminAccountDetail();
    }

    /**
     * Gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @return array<string, mixed>|null
    */
    public function getAdditionalData(): ?array {
        $val = $this->getBackingStore()->get('additionalData');
        if (is_null($val) || is_array($val)) {
            /** @var array<string, mixed>|null $val */
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'additionalData'");
    }

    /**
     * Gets the adminAccountPassword property value. The local administrator account password for the macOS device. This password is auto generated, 15 characters by default, and unique for each device. The autogenerated password is created when the device is enrolled by Automated Device Enrollment process. Read-only.
     * @return string|null
    */
    public function getAdminAccountPassword(): ?string {
        $val = $this->getBackingStore()->get('adminAccountPassword');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'adminAccountPassword'");
    }

    /**
     * Gets the BackingStore property value. Stores model information.
     * @return BackingStore
    */
    public function getBackingStore(): BackingStore {
        return $this->backingStore;
    }

    /**
     * The deserialization information for the current model
     * @return array<string, callable(ParseNode): void>
    */
    public function getFieldDeserializers(): array {
        $o = $this;
        return  [
            'adminAccountPassword' => fn(ParseNode $n) => $o->setAdminAccountPassword($n->getStringValue()),
            '@odata.type' => fn(ParseNode $n) => $o->setOdataType($n->getStringValue()),
            'passwordLastRotatedDateTime' => fn(ParseNode $n) => $o->setPasswordLastRotatedDateTime($n->getDateTimeValue()),
        ];
    }

    /**
     * Gets the @odata.type property value. The OdataType property
     * @return string|null
    */
    public function getOdataType(): ?string {
        $val = $this->getBackingStore()->get('odataType');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'odataType'");
    }

    /**
     * Gets the passwordLastRotatedDateTime property value. The timestamp when the admin account password was last rotated. The timestamp type represents data and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '2014-01-01T00:00:00Z'. Read-only.
     * @return DateTime|null
    */
    public function getPasswordLastRotatedDateTime(): ?DateTime {
        $val = $this->getBackingStore()->get('passwordLastRotatedDateTime');
        if (is_null($val) || $val instanceof DateTime) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'passwordLastRotatedDateTime'");
    }

    /**
     * Serializes information the current object
     * @param SerializationWriter $writer Serialization writer to use to serialize this model
    */
    public function serialize(SerializationWriter $writer): void {
        $writer->writeStringValue('adminAccountPassword', $this->getAdminAccountPassword());
        $writer->writeStringValue('@odata.type', $this->getOdataType());
        $writer->writeDateTimeValue('passwordLastRotatedDateTime', $this->getPasswordLastRotatedDateTime());
        $writer->writeAdditionalData($this->getAdditionalData());
    }

    /**
     * Sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @param array<string,mixed> $value Value to set for the AdditionalData property.
    */
    public function setAdditionalData(?array $value): void {
        $this->getBackingStore()->set('additionalData', $value);
    }

    /**
     * Sets the adminAccountPassword property value. The local administrator account password for the macOS device. This password is auto generated, 15 characters by default, and unique for each device. The autogenerated password is created when the device is enrolled by Automated Device Enrollment process. Read-only.
     * @param string|null $value Value to set for the adminAccountPassword property.
    */
    public function setAdminAccountPassword(?string $value): void {
        $this->getBackingStore()->set('adminAccountPassword', $value);
    }

    /**
     * Sets the BackingStore property value. Stores model information.
     * @param BackingStore $value Value to set for the BackingStore property.
    */
    public function setBackingStore(BackingStore $value): void {
        $this->backingStore = $value;
    }

    /**
     * Sets the @odata.type property value. The OdataType property
     * @param string|null $value Value to set for the @odata.type property.
    */
    public function setOdataType(?string $value): void {
        $this->getBackingStore()->set('odataType', $value);
    }

    /**
     * Sets the passwordLastRotatedDateTime property value. The timestamp when the admin account password was last rotated. The timestamp type represents data and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '2014-01-01T00:00:00Z'. Read-only.
     * @param DateTime|null $value Value to set for the passwordLastRotatedDateTime property.
    */
    public function setPasswordLastRotatedDateTime(?DateTime $value): void {
        $this->getBackingStore()->set('passwordLastRotatedDateTime', $value);
    }

}
