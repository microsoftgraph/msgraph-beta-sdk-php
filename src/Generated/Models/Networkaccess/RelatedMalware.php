<?php

namespace Microsoft\Graph\Beta\Generated\Models\Networkaccess;

use Microsoft\Kiota\Abstractions\Serialization\Parsable;
use Microsoft\Kiota\Abstractions\Serialization\ParseNode;
use Microsoft\Kiota\Abstractions\Serialization\SerializationWriter;

class RelatedMalware extends RelatedResource implements Parsable 
{
    /**
     * Instantiates a new RelatedMalware and sets the default values.
    */
    public function __construct() {
        parent::__construct();
        $this->setOdataType('#microsoft.graph.networkaccess.relatedMalware');
    }

    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param ParseNode $parseNode The parse node to use to read the discriminator value and create the object
     * @return RelatedMalware
    */
    public static function createFromDiscriminatorValue(ParseNode $parseNode): RelatedMalware {
        return new RelatedMalware();
    }

    /**
     * Gets the category property value. The category property
     * @return MalwareCategory|null
    */
    public function getCategory(): ?MalwareCategory {
        $val = $this->getBackingStore()->get('category');
        if (is_null($val) || $val instanceof MalwareCategory) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'category'");
    }

    /**
     * The deserialization information for the current model
     * @return array<string, callable(ParseNode): void>
    */
    public function getFieldDeserializers(): array {
        $o = $this;
        return array_merge(parent::getFieldDeserializers(), [
            'category' => fn(ParseNode $n) => $o->setCategory($n->getEnumValue(MalwareCategory::class)),
            'name' => fn(ParseNode $n) => $o->setName($n->getStringValue()),
            'severity' => fn(ParseNode $n) => $o->setSeverity($n->getEnumValue(ThreatSeverity::class)),
        ]);
    }

    /**
     * Gets the name property value. The name property
     * @return string|null
    */
    public function getName(): ?string {
        $val = $this->getBackingStore()->get('name');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'name'");
    }

    /**
     * Gets the severity property value. The severity property
     * @return ThreatSeverity|null
    */
    public function getSeverity(): ?ThreatSeverity {
        $val = $this->getBackingStore()->get('severity');
        if (is_null($val) || $val instanceof ThreatSeverity) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'severity'");
    }

    /**
     * Serializes information the current object
     * @param SerializationWriter $writer Serialization writer to use to serialize this model
    */
    public function serialize(SerializationWriter $writer): void {
        parent::serialize($writer);
        $writer->writeEnumValue('category', $this->getCategory());
        $writer->writeStringValue('name', $this->getName());
        $writer->writeEnumValue('severity', $this->getSeverity());
    }

    /**
     * Sets the category property value. The category property
     * @param MalwareCategory|null $value Value to set for the category property.
    */
    public function setCategory(?MalwareCategory $value): void {
        $this->getBackingStore()->set('category', $value);
    }

    /**
     * Sets the name property value. The name property
     * @param string|null $value Value to set for the name property.
    */
    public function setName(?string $value): void {
        $this->getBackingStore()->set('name', $value);
    }

    /**
     * Sets the severity property value. The severity property
     * @param ThreatSeverity|null $value Value to set for the severity property.
    */
    public function setSeverity(?ThreatSeverity $value): void {
        $this->getBackingStore()->set('severity', $value);
    }

}
