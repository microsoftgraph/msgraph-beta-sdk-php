<?php

namespace Microsoft\Graph\Beta\Generated\Models;

use Microsoft\Kiota\Abstractions\Serialization\AdditionalDataHolder;
use Microsoft\Kiota\Abstractions\Serialization\Parsable;
use Microsoft\Kiota\Abstractions\Serialization\ParseNode;
use Microsoft\Kiota\Abstractions\Serialization\SerializationWriter;

class VulnerabilityState implements AdditionalDataHolder, Parsable 
{
    /**
     * @var array<string, mixed> $AdditionalData Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    */
    private array $additionalData;
    
    /**
     * @var string|null $cve Common Vulnerabilities and Exposures (CVE) for the vulnerability.
    */
    private ?string $cve = null;
    
    /**
     * @var string|null $severity Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
    */
    private ?string $severity = null;
    
    /**
     * @var bool|null $wasRunning Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
    */
    private ?bool $wasRunning = null;
    
    /**
     * Instantiates a new vulnerabilityState and sets the default values.
    */
    public function __construct() {
        $this->additionalData = [];
    }

    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param ParseNode $parseNode The parse node to use to read the discriminator value and create the object
     * @return VulnerabilityState
    */
    public static function createFromDiscriminatorValue(ParseNode $parseNode): VulnerabilityState {
        return new VulnerabilityState();
    }

    /**
     * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @return array<string, mixed>
    */
    public function getAdditionalData(): array {
        return $this->additionalData;
    }

    /**
     * Gets the cve property value. Common Vulnerabilities and Exposures (CVE) for the vulnerability.
     * @return string|null
    */
    public function getCve(): ?string {
        return $this->cve;
    }

    /**
     * The deserialization information for the current model
     * @return array<string, callable>
    */
    public function getFieldDeserializers(): array {
        $o = $this;
        return  [
            'cve' => function (ParseNode $n) use ($o) { $o->setCve($n->getStringValue()); },
            'severity' => function (ParseNode $n) use ($o) { $o->setSeverity($n->getStringValue()); },
            'wasRunning' => function (ParseNode $n) use ($o) { $o->setWasRunning($n->getBooleanValue()); },
        ];
    }

    /**
     * Gets the severity property value. Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
     * @return string|null
    */
    public function getSeverity(): ?string {
        return $this->severity;
    }

    /**
     * Gets the wasRunning property value. Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
     * @return bool|null
    */
    public function getWasRunning(): ?bool {
        return $this->wasRunning;
    }

    /**
     * Serializes information the current object
     * @param SerializationWriter $writer Serialization writer to use to serialize this model
    */
    public function serialize(SerializationWriter $writer): void {
        $writer->writeStringValue('cve', $this->cve);
        $writer->writeStringValue('severity', $this->severity);
        $writer->writeBooleanValue('wasRunning', $this->wasRunning);
        $writer->writeAdditionalData($this->additionalData);
    }

    /**
     * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     *  @param array<string,mixed> $value Value to set for the AdditionalData property.
    */
    public function setAdditionalData(?array $value ): void {
        $this->additionalData = $value;
    }

    /**
     * Sets the cve property value. Common Vulnerabilities and Exposures (CVE) for the vulnerability.
     *  @param string|null $value Value to set for the cve property.
    */
    public function setCve(?string $value ): void {
        $this->cve = $value;
    }

    /**
     * Sets the severity property value. Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
     *  @param string|null $value Value to set for the severity property.
    */
    public function setSeverity(?string $value ): void {
        $this->severity = $value;
    }

    /**
     * Sets the wasRunning property value. Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
     *  @param bool|null $value Value to set for the wasRunning property.
    */
    public function setWasRunning(?bool $value ): void {
        $this->wasRunning = $value;
    }

}
