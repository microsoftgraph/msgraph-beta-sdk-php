<?php

namespace Microsoft\Graph\Beta\Generated\Models;

use Microsoft\Kiota\Abstractions\Serialization\Parsable;
use Microsoft\Kiota\Abstractions\Serialization\ParseNode;
use Microsoft\Kiota\Abstractions\Serialization\SerializationWriter;

class UserAccountInformation extends ItemFacet implements Parsable 
{
    /**
     * Instantiates a new UserAccountInformation and sets the default values.
    */
    public function __construct() {
        parent::__construct();
        $this->setOdataType('#microsoft.graph.userAccountInformation');
    }

    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param ParseNode $parseNode The parse node to use to read the discriminator value and create the object
     * @return UserAccountInformation
    */
    public static function createFromDiscriminatorValue(ParseNode $parseNode): UserAccountInformation {
        return new UserAccountInformation();
    }

    /**
     * Gets the ageGroup property value. Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and can't be changed.
     * @return string|null
    */
    public function getAgeGroup(): ?string {
        $val = $this->getBackingStore()->get('ageGroup');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'ageGroup'");
    }

    /**
     * Gets the countryCode property value. Contains the two-character country code associated with the users' account.
     * @return string|null
    */
    public function getCountryCode(): ?string {
        $val = $this->getBackingStore()->get('countryCode');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'countryCode'");
    }

    /**
     * The deserialization information for the current model
     * @return array<string, callable(ParseNode): void>
    */
    public function getFieldDeserializers(): array {
        $o = $this;
        return array_merge(parent::getFieldDeserializers(), [
            'ageGroup' => fn(ParseNode $n) => $o->setAgeGroup($n->getStringValue()),
            'countryCode' => fn(ParseNode $n) => $o->setCountryCode($n->getStringValue()),
            'preferredLanguageTag' => fn(ParseNode $n) => $o->setPreferredLanguageTag($n->getObjectValue([LocaleInfo::class, 'createFromDiscriminatorValue'])),
            'userPrincipalName' => fn(ParseNode $n) => $o->setUserPrincipalName($n->getStringValue()),
        ]);
    }

    /**
     * Gets the preferredLanguageTag property value. Contains the language the user has associated as preferred for the account.
     * @return LocaleInfo|null
    */
    public function getPreferredLanguageTag(): ?LocaleInfo {
        $val = $this->getBackingStore()->get('preferredLanguageTag');
        if (is_null($val) || $val instanceof LocaleInfo) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'preferredLanguageTag'");
    }

    /**
     * Gets the userPrincipalName property value. The user principal name (UPN) of the user associated with the account.
     * @return string|null
    */
    public function getUserPrincipalName(): ?string {
        $val = $this->getBackingStore()->get('userPrincipalName');
        if (is_null($val) || is_string($val)) {
            return $val;
        }
        throw new \UnexpectedValueException("Invalid type found in backing store for 'userPrincipalName'");
    }

    /**
     * Serializes information the current object
     * @param SerializationWriter $writer Serialization writer to use to serialize this model
    */
    public function serialize(SerializationWriter $writer): void {
        parent::serialize($writer);
        $writer->writeStringValue('ageGroup', $this->getAgeGroup());
        $writer->writeStringValue('countryCode', $this->getCountryCode());
        $writer->writeObjectValue('preferredLanguageTag', $this->getPreferredLanguageTag());
        $writer->writeStringValue('userPrincipalName', $this->getUserPrincipalName());
    }

    /**
     * Sets the ageGroup property value. Shows the age group of user. Allowed values null, minor, notAdult and adult are generated by the directory and can't be changed.
     * @param string|null $value Value to set for the ageGroup property.
    */
    public function setAgeGroup(?string $value): void {
        $this->getBackingStore()->set('ageGroup', $value);
    }

    /**
     * Sets the countryCode property value. Contains the two-character country code associated with the users' account.
     * @param string|null $value Value to set for the countryCode property.
    */
    public function setCountryCode(?string $value): void {
        $this->getBackingStore()->set('countryCode', $value);
    }

    /**
     * Sets the preferredLanguageTag property value. Contains the language the user has associated as preferred for the account.
     * @param LocaleInfo|null $value Value to set for the preferredLanguageTag property.
    */
    public function setPreferredLanguageTag(?LocaleInfo $value): void {
        $this->getBackingStore()->set('preferredLanguageTag', $value);
    }

    /**
     * Sets the userPrincipalName property value. The user principal name (UPN) of the user associated with the account.
     * @param string|null $value Value to set for the userPrincipalName property.
    */
    public function setUserPrincipalName(?string $value): void {
        $this->getBackingStore()->set('userPrincipalName', $value);
    }

}
