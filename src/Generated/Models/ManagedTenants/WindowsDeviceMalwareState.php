<?php

namespace Microsoft\Graph\Beta\Generated\Models\ManagedTenants;

use DateTime;
use Microsoft\Graph\Beta\Generated\Models\Entity;
use Microsoft\Kiota\Abstractions\Serialization\Parsable;
use Microsoft\Kiota\Abstractions\Serialization\ParseNode;
use Microsoft\Kiota\Abstractions\Serialization\SerializationWriter;

class WindowsDeviceMalwareState extends Entity implements Parsable 
{
    /**
     * Instantiates a new WindowsDeviceMalwareState and sets the default values.
    */
    public function __construct() {
        parent::__construct();
    }

    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param ParseNode $parseNode The parse node to use to read the discriminator value and create the object
     * @return WindowsDeviceMalwareState
    */
    public static function createFromDiscriminatorValue(ParseNode $parseNode): WindowsDeviceMalwareState {
        return new WindowsDeviceMalwareState();
    }

    /**
     * Gets the additionalInformationUrl property value. The additional information URL for the discovered malware. Optional. Read-only.
     * @return string|null
    */
    public function getAdditionalInformationUrl(): ?string {
        return $this->getBackingStore()->get('additionalInformationUrl');
    }

    /**
     * Gets the detectionCount property value. The number of times the piece of malware has been detected. Optional. Read-only.
     * @return int|null
    */
    public function getDetectionCount(): ?int {
        return $this->getBackingStore()->get('detectionCount');
    }

    /**
     * Gets the deviceDeleted property value. A flag indicating whether the device has been deleted. Optional. Read-only.
     * @return bool|null
    */
    public function getDeviceDeleted(): ?bool {
        return $this->getBackingStore()->get('deviceDeleted');
    }

    /**
     * The deserialization information for the current model
     * @return array<string, callable>
    */
    public function getFieldDeserializers(): array {
        $o = $this;
        return array_merge(parent::getFieldDeserializers(), [
            'additionalInformationUrl' => fn(ParseNode $n) => $o->setAdditionalInformationUrl($n->getStringValue()),
            'detectionCount' => fn(ParseNode $n) => $o->setDetectionCount($n->getIntegerValue()),
            'deviceDeleted' => fn(ParseNode $n) => $o->setDeviceDeleted($n->getBooleanValue()),
            'initialDetectionDateTime' => fn(ParseNode $n) => $o->setInitialDetectionDateTime($n->getDateTimeValue()),
            'lastRefreshedDateTime' => fn(ParseNode $n) => $o->setLastRefreshedDateTime($n->getDateTimeValue()),
            'lastStateChangeDateTime' => fn(ParseNode $n) => $o->setLastStateChangeDateTime($n->getDateTimeValue()),
            'malwareCategory' => fn(ParseNode $n) => $o->setMalwareCategory($n->getStringValue()),
            'malwareDisplayName' => fn(ParseNode $n) => $o->setMalwareDisplayName($n->getStringValue()),
            'malwareExecutionState' => fn(ParseNode $n) => $o->setMalwareExecutionState($n->getStringValue()),
            'malwareId' => fn(ParseNode $n) => $o->setMalwareId($n->getStringValue()),
            'malwareSeverity' => fn(ParseNode $n) => $o->setMalwareSeverity($n->getStringValue()),
            'malwareThreatState' => fn(ParseNode $n) => $o->setMalwareThreatState($n->getStringValue()),
            'managedDeviceId' => fn(ParseNode $n) => $o->setManagedDeviceId($n->getStringValue()),
            'managedDeviceName' => fn(ParseNode $n) => $o->setManagedDeviceName($n->getStringValue()),
            'tenantDisplayName' => fn(ParseNode $n) => $o->setTenantDisplayName($n->getStringValue()),
            'tenantId' => fn(ParseNode $n) => $o->setTenantId($n->getStringValue()),
        ]);
    }

    /**
     * Gets the initialDetectionDateTime property value. The date and time the piece of malware was initially detected. Optional. Read-only.
     * @return DateTime|null
    */
    public function getInitialDetectionDateTime(): ?DateTime {
        return $this->getBackingStore()->get('initialDetectionDateTime');
    }

    /**
     * Gets the lastRefreshedDateTime property value. Date and time the entity was last updated in the multi-tenant management platform. Optional. Read-only.
     * @return DateTime|null
    */
    public function getLastRefreshedDateTime(): ?DateTime {
        return $this->getBackingStore()->get('lastRefreshedDateTime');
    }

    /**
     * Gets the lastStateChangeDateTime property value. The date and time the malware state was last changed. Optional. Read-only.
     * @return DateTime|null
    */
    public function getLastStateChangeDateTime(): ?DateTime {
        return $this->getBackingStore()->get('lastStateChangeDateTime');
    }

    /**
     * Gets the malwareCategory property value. The category for the detected malware. Optional. Read-only.
     * @return string|null
    */
    public function getMalwareCategory(): ?string {
        return $this->getBackingStore()->get('malwareCategory');
    }

    /**
     * Gets the malwareDisplayName property value. The display name for the detected malware. Optional. Read-only.
     * @return string|null
    */
    public function getMalwareDisplayName(): ?string {
        return $this->getBackingStore()->get('malwareDisplayName');
    }

    /**
     * Gets the malwareExecutionState property value. The execution state for the detected malware. Optional. Read-only.
     * @return string|null
    */
    public function getMalwareExecutionState(): ?string {
        return $this->getBackingStore()->get('malwareExecutionState');
    }

    /**
     * Gets the malwareId property value. The unique identifier for the detected malware. Optional. Read-only.
     * @return string|null
    */
    public function getMalwareId(): ?string {
        return $this->getBackingStore()->get('malwareId');
    }

    /**
     * Gets the malwareSeverity property value. The severity for the detected malware. Optional. Read-only.
     * @return string|null
    */
    public function getMalwareSeverity(): ?string {
        return $this->getBackingStore()->get('malwareSeverity');
    }

    /**
     * Gets the malwareThreatState property value. The threat state for the detected malware. Optional. Read-only.
     * @return string|null
    */
    public function getMalwareThreatState(): ?string {
        return $this->getBackingStore()->get('malwareThreatState');
    }

    /**
     * Gets the managedDeviceId property value. The identifier for the managed device where the malware was detected. Optional. Read-only.
     * @return string|null
    */
    public function getManagedDeviceId(): ?string {
        return $this->getBackingStore()->get('managedDeviceId');
    }

    /**
     * Gets the managedDeviceName property value. The display name for the managed device where the malware was detected. Optional. Read-only.
     * @return string|null
    */
    public function getManagedDeviceName(): ?string {
        return $this->getBackingStore()->get('managedDeviceName');
    }

    /**
     * Gets the tenantDisplayName property value. The display name for the managed tenant. Optional. Read-only.
     * @return string|null
    */
    public function getTenantDisplayName(): ?string {
        return $this->getBackingStore()->get('tenantDisplayName');
    }

    /**
     * Gets the tenantId property value. The Azure Active Directory tenant identifier for the managed tenant. Optional. Read-only.
     * @return string|null
    */
    public function getTenantId(): ?string {
        return $this->getBackingStore()->get('tenantId');
    }

    /**
     * Serializes information the current object
     * @param SerializationWriter $writer Serialization writer to use to serialize this model
    */
    public function serialize(SerializationWriter $writer): void {
        parent::serialize($writer);
        $writer->writeStringValue('additionalInformationUrl', $this->getAdditionalInformationUrl());
        $writer->writeIntegerValue('detectionCount', $this->getDetectionCount());
        $writer->writeBooleanValue('deviceDeleted', $this->getDeviceDeleted());
        $writer->writeDateTimeValue('initialDetectionDateTime', $this->getInitialDetectionDateTime());
        $writer->writeDateTimeValue('lastRefreshedDateTime', $this->getLastRefreshedDateTime());
        $writer->writeDateTimeValue('lastStateChangeDateTime', $this->getLastStateChangeDateTime());
        $writer->writeStringValue('malwareCategory', $this->getMalwareCategory());
        $writer->writeStringValue('malwareDisplayName', $this->getMalwareDisplayName());
        $writer->writeStringValue('malwareExecutionState', $this->getMalwareExecutionState());
        $writer->writeStringValue('malwareId', $this->getMalwareId());
        $writer->writeStringValue('malwareSeverity', $this->getMalwareSeverity());
        $writer->writeStringValue('malwareThreatState', $this->getMalwareThreatState());
        $writer->writeStringValue('managedDeviceId', $this->getManagedDeviceId());
        $writer->writeStringValue('managedDeviceName', $this->getManagedDeviceName());
        $writer->writeStringValue('tenantDisplayName', $this->getTenantDisplayName());
        $writer->writeStringValue('tenantId', $this->getTenantId());
    }

    /**
     * Sets the additionalInformationUrl property value. The additional information URL for the discovered malware. Optional. Read-only.
     * @param string|null $value Value to set for the additionalInformationUrl property.
    */
    public function setAdditionalInformationUrl(?string $value): void {
        $this->getBackingStore()->set('additionalInformationUrl', $value);
    }

    /**
     * Sets the detectionCount property value. The number of times the piece of malware has been detected. Optional. Read-only.
     * @param int|null $value Value to set for the detectionCount property.
    */
    public function setDetectionCount(?int $value): void {
        $this->getBackingStore()->set('detectionCount', $value);
    }

    /**
     * Sets the deviceDeleted property value. A flag indicating whether the device has been deleted. Optional. Read-only.
     * @param bool|null $value Value to set for the deviceDeleted property.
    */
    public function setDeviceDeleted(?bool $value): void {
        $this->getBackingStore()->set('deviceDeleted', $value);
    }

    /**
     * Sets the initialDetectionDateTime property value. The date and time the piece of malware was initially detected. Optional. Read-only.
     * @param DateTime|null $value Value to set for the initialDetectionDateTime property.
    */
    public function setInitialDetectionDateTime(?DateTime $value): void {
        $this->getBackingStore()->set('initialDetectionDateTime', $value);
    }

    /**
     * Sets the lastRefreshedDateTime property value. Date and time the entity was last updated in the multi-tenant management platform. Optional. Read-only.
     * @param DateTime|null $value Value to set for the lastRefreshedDateTime property.
    */
    public function setLastRefreshedDateTime(?DateTime $value): void {
        $this->getBackingStore()->set('lastRefreshedDateTime', $value);
    }

    /**
     * Sets the lastStateChangeDateTime property value. The date and time the malware state was last changed. Optional. Read-only.
     * @param DateTime|null $value Value to set for the lastStateChangeDateTime property.
    */
    public function setLastStateChangeDateTime(?DateTime $value): void {
        $this->getBackingStore()->set('lastStateChangeDateTime', $value);
    }

    /**
     * Sets the malwareCategory property value. The category for the detected malware. Optional. Read-only.
     * @param string|null $value Value to set for the malwareCategory property.
    */
    public function setMalwareCategory(?string $value): void {
        $this->getBackingStore()->set('malwareCategory', $value);
    }

    /**
     * Sets the malwareDisplayName property value. The display name for the detected malware. Optional. Read-only.
     * @param string|null $value Value to set for the malwareDisplayName property.
    */
    public function setMalwareDisplayName(?string $value): void {
        $this->getBackingStore()->set('malwareDisplayName', $value);
    }

    /**
     * Sets the malwareExecutionState property value. The execution state for the detected malware. Optional. Read-only.
     * @param string|null $value Value to set for the malwareExecutionState property.
    */
    public function setMalwareExecutionState(?string $value): void {
        $this->getBackingStore()->set('malwareExecutionState', $value);
    }

    /**
     * Sets the malwareId property value. The unique identifier for the detected malware. Optional. Read-only.
     * @param string|null $value Value to set for the malwareId property.
    */
    public function setMalwareId(?string $value): void {
        $this->getBackingStore()->set('malwareId', $value);
    }

    /**
     * Sets the malwareSeverity property value. The severity for the detected malware. Optional. Read-only.
     * @param string|null $value Value to set for the malwareSeverity property.
    */
    public function setMalwareSeverity(?string $value): void {
        $this->getBackingStore()->set('malwareSeverity', $value);
    }

    /**
     * Sets the malwareThreatState property value. The threat state for the detected malware. Optional. Read-only.
     * @param string|null $value Value to set for the malwareThreatState property.
    */
    public function setMalwareThreatState(?string $value): void {
        $this->getBackingStore()->set('malwareThreatState', $value);
    }

    /**
     * Sets the managedDeviceId property value. The identifier for the managed device where the malware was detected. Optional. Read-only.
     * @param string|null $value Value to set for the managedDeviceId property.
    */
    public function setManagedDeviceId(?string $value): void {
        $this->getBackingStore()->set('managedDeviceId', $value);
    }

    /**
     * Sets the managedDeviceName property value. The display name for the managed device where the malware was detected. Optional. Read-only.
     * @param string|null $value Value to set for the managedDeviceName property.
    */
    public function setManagedDeviceName(?string $value): void {
        $this->getBackingStore()->set('managedDeviceName', $value);
    }

    /**
     * Sets the tenantDisplayName property value. The display name for the managed tenant. Optional. Read-only.
     * @param string|null $value Value to set for the tenantDisplayName property.
    */
    public function setTenantDisplayName(?string $value): void {
        $this->getBackingStore()->set('tenantDisplayName', $value);
    }

    /**
     * Sets the tenantId property value. The Azure Active Directory tenant identifier for the managed tenant. Optional. Read-only.
     * @param string|null $value Value to set for the tenantId property.
    */
    public function setTenantId(?string $value): void {
        $this->getBackingStore()->set('tenantId', $value);
    }

}
